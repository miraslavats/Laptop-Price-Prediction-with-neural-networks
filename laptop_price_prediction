{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Neural Network Regression: Laptop Prices prediction"
      ],
      "metadata": {
        "id": "WlJaLCohQ1hW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "In this notebook, I am practicing neural network regression with TensorFlow. I am using the [laptop_price dataset](https://www.kaggle.com/datasets/muhammetvarl/laptop-price?resource=download) from Kaggle. <br><br>\n",
        "GOAL: practice neural network regression with TensorFlow and minimise the error when predicting laptop prices.\n",
        "<br><br>\n",
        "Concepts practiced: One hot encoding, feature scaling, supervised learning"
      ],
      "metadata": {
        "id": "ZSWWo_0tQ9ww"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Importing libraries"
      ],
      "metadata": {
        "id": "dLLnIIzeS_fq"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "R5Pov2qYMK35"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.compose import make_column_transformer\n",
        "from sklearn.preprocessing import MinMaxScaler, OneHotEncoder"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Accessing the dataset & Pre-processing"
      ],
      "metadata": {
        "id": "QJEAs3LDTERT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "laptop = pd.read_csv(\"/content/laptop_price.csv\", encoding='latin-1')"
      ],
      "metadata": {
        "id": "5lpNgN3kNBbL"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "laptop.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "C28z-HZqPLim",
        "outputId": "9d5a03c6-0886-4f40-e9ab-597c994dbcd9"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   laptop_ID Company      Product   TypeName  Inches  \\\n",
              "0          1   Apple  MacBook Pro  Ultrabook    13.3   \n",
              "1          2   Apple  Macbook Air  Ultrabook    13.3   \n",
              "2          3      HP       250 G6   Notebook    15.6   \n",
              "3          4   Apple  MacBook Pro  Ultrabook    15.4   \n",
              "4          5   Apple  MacBook Pro  Ultrabook    13.3   \n",
              "\n",
              "                     ScreenResolution                         Cpu   Ram  \\\n",
              "0  IPS Panel Retina Display 2560x1600        Intel Core i5 2.3GHz   8GB   \n",
              "1                            1440x900        Intel Core i5 1.8GHz   8GB   \n",
              "2                   Full HD 1920x1080  Intel Core i5 7200U 2.5GHz   8GB   \n",
              "3  IPS Panel Retina Display 2880x1800        Intel Core i7 2.7GHz  16GB   \n",
              "4  IPS Panel Retina Display 2560x1600        Intel Core i5 3.1GHz   8GB   \n",
              "\n",
              "                Memory                           Gpu  OpSys  Weight  \\\n",
              "0            128GB SSD  Intel Iris Plus Graphics 640  macOS  1.37kg   \n",
              "1  128GB Flash Storage        Intel HD Graphics 6000  macOS  1.34kg   \n",
              "2            256GB SSD         Intel HD Graphics 620  No OS  1.86kg   \n",
              "3            512GB SSD            AMD Radeon Pro 455  macOS  1.83kg   \n",
              "4            256GB SSD  Intel Iris Plus Graphics 650  macOS  1.37kg   \n",
              "\n",
              "   Price_euros  \n",
              "0      1339.69  \n",
              "1       898.94  \n",
              "2       575.00  \n",
              "3      2537.45  \n",
              "4      1803.60  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c4edb808-5cae-4a4a-bc75-a7de24379320\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>laptop_ID</th>\n",
              "      <th>Company</th>\n",
              "      <th>Product</th>\n",
              "      <th>TypeName</th>\n",
              "      <th>Inches</th>\n",
              "      <th>ScreenResolution</th>\n",
              "      <th>Cpu</th>\n",
              "      <th>Ram</th>\n",
              "      <th>Memory</th>\n",
              "      <th>Gpu</th>\n",
              "      <th>OpSys</th>\n",
              "      <th>Weight</th>\n",
              "      <th>Price_euros</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Apple</td>\n",
              "      <td>MacBook Pro</td>\n",
              "      <td>Ultrabook</td>\n",
              "      <td>13.3</td>\n",
              "      <td>IPS Panel Retina Display 2560x1600</td>\n",
              "      <td>Intel Core i5 2.3GHz</td>\n",
              "      <td>8GB</td>\n",
              "      <td>128GB SSD</td>\n",
              "      <td>Intel Iris Plus Graphics 640</td>\n",
              "      <td>macOS</td>\n",
              "      <td>1.37kg</td>\n",
              "      <td>1339.69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Apple</td>\n",
              "      <td>Macbook Air</td>\n",
              "      <td>Ultrabook</td>\n",
              "      <td>13.3</td>\n",
              "      <td>1440x900</td>\n",
              "      <td>Intel Core i5 1.8GHz</td>\n",
              "      <td>8GB</td>\n",
              "      <td>128GB Flash Storage</td>\n",
              "      <td>Intel HD Graphics 6000</td>\n",
              "      <td>macOS</td>\n",
              "      <td>1.34kg</td>\n",
              "      <td>898.94</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>HP</td>\n",
              "      <td>250 G6</td>\n",
              "      <td>Notebook</td>\n",
              "      <td>15.6</td>\n",
              "      <td>Full HD 1920x1080</td>\n",
              "      <td>Intel Core i5 7200U 2.5GHz</td>\n",
              "      <td>8GB</td>\n",
              "      <td>256GB SSD</td>\n",
              "      <td>Intel HD Graphics 620</td>\n",
              "      <td>No OS</td>\n",
              "      <td>1.86kg</td>\n",
              "      <td>575.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Apple</td>\n",
              "      <td>MacBook Pro</td>\n",
              "      <td>Ultrabook</td>\n",
              "      <td>15.4</td>\n",
              "      <td>IPS Panel Retina Display 2880x1800</td>\n",
              "      <td>Intel Core i7 2.7GHz</td>\n",
              "      <td>16GB</td>\n",
              "      <td>512GB SSD</td>\n",
              "      <td>AMD Radeon Pro 455</td>\n",
              "      <td>macOS</td>\n",
              "      <td>1.83kg</td>\n",
              "      <td>2537.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Apple</td>\n",
              "      <td>MacBook Pro</td>\n",
              "      <td>Ultrabook</td>\n",
              "      <td>13.3</td>\n",
              "      <td>IPS Panel Retina Display 2560x1600</td>\n",
              "      <td>Intel Core i5 3.1GHz</td>\n",
              "      <td>8GB</td>\n",
              "      <td>256GB SSD</td>\n",
              "      <td>Intel Iris Plus Graphics 650</td>\n",
              "      <td>macOS</td>\n",
              "      <td>1.37kg</td>\n",
              "      <td>1803.60</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c4edb808-5cae-4a4a-bc75-a7de24379320')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c4edb808-5cae-4a4a-bc75-a7de24379320 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c4edb808-5cae-4a4a-bc75-a7de24379320');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Data Cleaning**\n",
        "<br><br>From the dataframe above we can see that we have 13 columns describing an item (latop). We also see that some columns contain strings, some floats, and there are other columns such as weight and ram that could be expressed numerically but are not. These columns (ram and weight) provide useful numerical information, while \"kg\" and \"GB\" are implied and do not add any important insight, so I will remove them. I will also remove product_id and product name columns since I believe they carry little weight when the laptop price is determined, rather they are simply assigned based on other characteristics from the table above. I will also convert all strings to lower case to reduce inaccuracy. <br><br>\n",
        "**Pre-processing**<br><br>\n",
        "\n",
        "I am also converting all the numerical columns, except for the price column to the same scale using **MinMaxScaler**. This will rescale the numerical columns to a range of 0-1, while preserving the ratios between the values as they are now. Additionally, after cleaning the string data, I will use **OneHotEncoding** to convert the information into vector representation."
      ],
      "metadata": {
        "id": "8-6Q8-8PTL42"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# converting to lower case\n",
        "laptop[\"Company\"] = laptop[\"Company\"].str.lower()\n",
        "laptop[\"TypeName\"] = laptop[\"TypeName\"].str.lower()\n",
        "laptop[\"ScreenResolution\"], laptop[\"Cpu\"], laptop[\"Memory\"] = laptop[\"ScreenResolution\"].str.lower(), laptop[\"Cpu\"].str.lower(), laptop[\"Memory\"].str.lower()\n",
        "laptop[\"Gpu\"], laptop[\"OpSys\"] = laptop[\"Gpu\"].str.lower(), laptop[\"OpSys\"].str.lower()\n",
        "\n",
        "# getting rid of GB and kg in ram and weight columns\n",
        "laptop[\"Ram\"] = laptop[\"Ram\"].str.replace(\"GB\", \"\")\n",
        "laptop[\"Weight\"] = laptop[\"Weight\"].str.replace(\"kg\", '')\n",
        "\n",
        "# converting weight and ram to numeric\n",
        "laptop[[\"Ram\", \"Weight\"]] = laptop[[\"Ram\", \"Weight\"]].apply(pd.to_numeric)"
      ],
      "metadata": {
        "id": "vwhZEDJhWbAs"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Before feature scaling and one hot encoding, I am dividing the dataset into two: X and y. X contains all the independent variables that can have an effect on the dependent variable y. In our case, we want to understand how laptop attributes influence laptop's price. Hence, y is the \"Price_euros\" column, and X contains everything else except for the product ID and name."
      ],
      "metadata": {
        "id": "yCZG87duXKHo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# dividing into indepedent and dependent datasets\n",
        "X, y = laptop.drop([\"laptop_ID\", \"Price_euros\", \"Product\"], axis = 1), laptop[\"Price_euros\"]\n",
        "X.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "mqD8OYzwRNqo",
        "outputId": "e59bf52c-c1bf-4b2a-c280-2b8b5fbaaa19"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Company   TypeName  Inches                    ScreenResolution  \\\n",
              "0   apple  ultrabook    13.3  ips panel retina display 2560x1600   \n",
              "1   apple  ultrabook    13.3                            1440x900   \n",
              "2      hp   notebook    15.6                   full hd 1920x1080   \n",
              "3   apple  ultrabook    15.4  ips panel retina display 2880x1800   \n",
              "4   apple  ultrabook    13.3  ips panel retina display 2560x1600   \n",
              "5    acer   notebook    15.6                            1366x768   \n",
              "6   apple  ultrabook    15.4  ips panel retina display 2880x1800   \n",
              "7   apple  ultrabook    13.3                            1440x900   \n",
              "8    asus  ultrabook    14.0                   full hd 1920x1080   \n",
              "9    acer  ultrabook    14.0         ips panel full hd 1920x1080   \n",
              "\n",
              "                          Cpu  Ram               Memory  \\\n",
              "0        intel core i5 2.3ghz    8            128gb ssd   \n",
              "1        intel core i5 1.8ghz    8  128gb flash storage   \n",
              "2  intel core i5 7200u 2.5ghz    8            256gb ssd   \n",
              "3        intel core i7 2.7ghz   16            512gb ssd   \n",
              "4        intel core i5 3.1ghz    8            256gb ssd   \n",
              "5     amd a9-series 9420 3ghz    4            500gb hdd   \n",
              "6        intel core i7 2.2ghz   16  256gb flash storage   \n",
              "7        intel core i5 1.8ghz    8  256gb flash storage   \n",
              "8  intel core i7 8550u 1.8ghz   16            512gb ssd   \n",
              "9  intel core i5 8250u 1.6ghz    8            256gb ssd   \n",
              "\n",
              "                            Gpu       OpSys  Weight  \n",
              "0  intel iris plus graphics 640       macos    1.37  \n",
              "1        intel hd graphics 6000       macos    1.34  \n",
              "2         intel hd graphics 620       no os    1.86  \n",
              "3            amd radeon pro 455       macos    1.83  \n",
              "4  intel iris plus graphics 650       macos    1.37  \n",
              "5                 amd radeon r5  windows 10    2.10  \n",
              "6       intel iris pro graphics    mac os x    2.04  \n",
              "7        intel hd graphics 6000       macos    1.34  \n",
              "8          nvidia geforce mx150  windows 10    1.30  \n",
              "9        intel uhd graphics 620  windows 10    1.60  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4a11e7f4-7103-46bf-8ebc-7c285b4b48d4\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Company</th>\n",
              "      <th>TypeName</th>\n",
              "      <th>Inches</th>\n",
              "      <th>ScreenResolution</th>\n",
              "      <th>Cpu</th>\n",
              "      <th>Ram</th>\n",
              "      <th>Memory</th>\n",
              "      <th>Gpu</th>\n",
              "      <th>OpSys</th>\n",
              "      <th>Weight</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>apple</td>\n",
              "      <td>ultrabook</td>\n",
              "      <td>13.3</td>\n",
              "      <td>ips panel retina display 2560x1600</td>\n",
              "      <td>intel core i5 2.3ghz</td>\n",
              "      <td>8</td>\n",
              "      <td>128gb ssd</td>\n",
              "      <td>intel iris plus graphics 640</td>\n",
              "      <td>macos</td>\n",
              "      <td>1.37</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>apple</td>\n",
              "      <td>ultrabook</td>\n",
              "      <td>13.3</td>\n",
              "      <td>1440x900</td>\n",
              "      <td>intel core i5 1.8ghz</td>\n",
              "      <td>8</td>\n",
              "      <td>128gb flash storage</td>\n",
              "      <td>intel hd graphics 6000</td>\n",
              "      <td>macos</td>\n",
              "      <td>1.34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>hp</td>\n",
              "      <td>notebook</td>\n",
              "      <td>15.6</td>\n",
              "      <td>full hd 1920x1080</td>\n",
              "      <td>intel core i5 7200u 2.5ghz</td>\n",
              "      <td>8</td>\n",
              "      <td>256gb ssd</td>\n",
              "      <td>intel hd graphics 620</td>\n",
              "      <td>no os</td>\n",
              "      <td>1.86</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>apple</td>\n",
              "      <td>ultrabook</td>\n",
              "      <td>15.4</td>\n",
              "      <td>ips panel retina display 2880x1800</td>\n",
              "      <td>intel core i7 2.7ghz</td>\n",
              "      <td>16</td>\n",
              "      <td>512gb ssd</td>\n",
              "      <td>amd radeon pro 455</td>\n",
              "      <td>macos</td>\n",
              "      <td>1.83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>apple</td>\n",
              "      <td>ultrabook</td>\n",
              "      <td>13.3</td>\n",
              "      <td>ips panel retina display 2560x1600</td>\n",
              "      <td>intel core i5 3.1ghz</td>\n",
              "      <td>8</td>\n",
              "      <td>256gb ssd</td>\n",
              "      <td>intel iris plus graphics 650</td>\n",
              "      <td>macos</td>\n",
              "      <td>1.37</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>acer</td>\n",
              "      <td>notebook</td>\n",
              "      <td>15.6</td>\n",
              "      <td>1366x768</td>\n",
              "      <td>amd a9-series 9420 3ghz</td>\n",
              "      <td>4</td>\n",
              "      <td>500gb hdd</td>\n",
              "      <td>amd radeon r5</td>\n",
              "      <td>windows 10</td>\n",
              "      <td>2.10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>apple</td>\n",
              "      <td>ultrabook</td>\n",
              "      <td>15.4</td>\n",
              "      <td>ips panel retina display 2880x1800</td>\n",
              "      <td>intel core i7 2.2ghz</td>\n",
              "      <td>16</td>\n",
              "      <td>256gb flash storage</td>\n",
              "      <td>intel iris pro graphics</td>\n",
              "      <td>mac os x</td>\n",
              "      <td>2.04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>apple</td>\n",
              "      <td>ultrabook</td>\n",
              "      <td>13.3</td>\n",
              "      <td>1440x900</td>\n",
              "      <td>intel core i5 1.8ghz</td>\n",
              "      <td>8</td>\n",
              "      <td>256gb flash storage</td>\n",
              "      <td>intel hd graphics 6000</td>\n",
              "      <td>macos</td>\n",
              "      <td>1.34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>asus</td>\n",
              "      <td>ultrabook</td>\n",
              "      <td>14.0</td>\n",
              "      <td>full hd 1920x1080</td>\n",
              "      <td>intel core i7 8550u 1.8ghz</td>\n",
              "      <td>16</td>\n",
              "      <td>512gb ssd</td>\n",
              "      <td>nvidia geforce mx150</td>\n",
              "      <td>windows 10</td>\n",
              "      <td>1.30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>acer</td>\n",
              "      <td>ultrabook</td>\n",
              "      <td>14.0</td>\n",
              "      <td>ips panel full hd 1920x1080</td>\n",
              "      <td>intel core i5 8250u 1.6ghz</td>\n",
              "      <td>8</td>\n",
              "      <td>256gb ssd</td>\n",
              "      <td>intel uhd graphics 620</td>\n",
              "      <td>windows 10</td>\n",
              "      <td>1.60</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4a11e7f4-7103-46bf-8ebc-7c285b4b48d4')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4a11e7f4-7103-46bf-8ebc-7c285b4b48d4 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4a11e7f4-7103-46bf-8ebc-7c285b4b48d4');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# checking the data types\n",
        "X.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2GJ_i5w_T3sg",
        "outputId": "cc112930-5655-47e1-ab14-0a1b15d33e10"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Company              object\n",
              "TypeName             object\n",
              "Inches              float64\n",
              "ScreenResolution     object\n",
              "Cpu                  object\n",
              "Ram                   int64\n",
              "Memory               object\n",
              "Gpu                  object\n",
              "OpSys                object\n",
              "Weight              float64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Train & Test split\n",
        "We want our model to be able to accurately estimate a newlaptop's price based on certain characteristics, even if the model has not seen this particular set of characteristics before. So, in order to assess this ability, we will preserve 20% of the dataset for testing our model, that is assessing how well or poorly it performs on \"new\" data, and how able it is to apply its knowledge from teh training dataset to unseen data."
      ],
      "metadata": {
        "id": "CEmjY19QYNUM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# splitting our dataset\n",
        "x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)"
      ],
      "metadata": {
        "id": "wZfL7GDxRr2d"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Below I am rescaling and numericaly encoding the specified columns so that our model can process the information (eg. normalizing)"
      ],
      "metadata": {
        "id": "nMlzW63uaSWk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# scaling to 0-1 range\n",
        "# representing string columns as sparse vectors\n",
        "ct = make_column_transformer(\n",
        "    (MinMaxScaler(), [\"Inches\", \"Ram\", \"Weight\"]),\n",
        "    (OneHotEncoder(handle_unknown = \"ignore\"), [\"Company\", \"TypeName\", \"ScreenResolution\", \"Cpu\", \"Memory\", \"Gpu\", \"OpSys\"])\n",
        ")\n",
        "\n",
        "ct.fit(x_train)\n",
        "x_train_normal = ct.transform(x_train)\n",
        "x_test_normal = ct.transform(x_test)"
      ],
      "metadata": {
        "id": "_K03v_zZZstz"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# converting to numpy so that TensorFlow can process the data\n",
        "x_test_normal = x_test_normal.toarray()\n",
        "x_train_normal = x_train_normal.toarray()"
      ],
      "metadata": {
        "id": "3uHQuqdSjomP"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Creating, testing and evaluating the model\n"
      ],
      "metadata": {
        "id": "8NjzI-uXavXi"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Below I am creating a three layer model (with 100, 10 and 1 neurons). To calculate the model error, I am using MAE (Mean Absolute Error), which computes how far off the model predicts the prices on average as compared to the actual prices."
      ],
      "metadata": {
        "id": "TqMYv0MUa-jf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# setting random seed for reproduction\n",
        "tf.random.set_seed(42)\n",
        "\n",
        "laptop_model = tf.keras.Sequential([\n",
        "    tf.keras.layers.Dense(100),\n",
        "    tf.keras.layers.Dense(10),\n",
        "    tf.keras.layers.Dense(1)\n",
        "])\n",
        "\n",
        "laptop_model.compile(loss = \"mae\",\n",
        "                     optimizer = tf.keras.optimizers.Adam(),\n",
        "                     metrics = [\"mae\"])\n",
        "\n",
        "# fitting on the normalized train data\n",
        "history = laptop_model.fit(x_train_normal, y_train, epochs = 200, verbose=0)"
      ],
      "metadata": {
        "id": "fLl-YT1Ol4Xe"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# evaluating the model on the test data\n",
        "laptop_model.evaluate(x_test_normal, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "skSR1sAQnqsY",
        "outputId": "17e8aeb7-bb38-402a-9530-fd4ac1f4fa54"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "9/9 [==============================] - 0s 3ms/step - loss: 182.2619 - mae: 182.2619\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[182.26194763183594, 182.26194763183594]"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Above, I evaluated the performance of the model on the test dataset. We can see that MAE is ~182.3, which means that on average the model's predictions are off by ~182.3 Euros, which is not so bad but could definitely be improved!"
      ],
      "metadata": {
        "id": "y0EGbgYLciFS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's plot how the model improved over the 200 iterations:"
      ],
      "metadata": {
        "id": "88X1ZgHWdJRO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pd.DataFrame(history.history).plot()\n",
        "plt.ylabel(\"loss\")\n",
        "plt.xlabel(\"epochs\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "1pXnKuCSnpOD",
        "outputId": "c80d1106-1d64-4579-fbfd-48811bb269ce"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 0, 'epochs')"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can see how the model improves drastically in the first ~40 iterations! The error drops from around 1300 to ~200! However, then it stabilizes and does not improve as much. In the following cell, I conducted some experiments and tweaked the model a little bit (changed the learning rate or added a layer to teh network), however, the original model remained the best-performing one."
      ],
      "metadata": {
        "id": "YfjBbj0GdbdO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Experimenting"
      ],
      "metadata": {
        "id": "VdVt39CdeE4d"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tf.random.set_seed(42)\n",
        "\n",
        "laptop_model2 = tf.keras.Sequential([\n",
        "    tf.keras.layers.Dense(100),\n",
        "    tf.keras.layers.Dense(10),\n",
        "    tf.keras.layers.Dense(1)\n",
        "])\n",
        "\n",
        "laptop_model2.compile(loss = \"mae\",\n",
        "                     optimizer = tf.keras.optimizers.Adam(learning_rate = 0.01),\n",
        "                     metrics = [\"mae\"])\n",
        "\n",
        "history2 = laptop_model2.fit(x_train_normal, y_train, epochs = 200, verbose = 0)"
      ],
      "metadata": {
        "id": "Bryn1NfEo2_-"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "laptop_model2.evaluate(x_test_normal, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jP42PAwqpeeV",
        "outputId": "7ac240b9-effb-4e71-eda0-ca24c0e07d27"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "9/9 [==============================] - 0s 4ms/step - loss: 183.6363 - mae: 183.6363\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[183.63632202148438, 183.63632202148438]"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "As I noted in the section above, the little changes I applied to the model did not result in a drastic improvements, so I decided to keep the original model."
      ],
      "metadata": {
        "id": "dFj9jmtBeLmb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Improvements"
      ],
      "metadata": {
        "id": "6GZURf00eKQd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "This model is relatively simple and was created as an exercise to consolidate my knowledge of neural networks and TensorFlow. While my understanding of the topics is currently limited, I am unable to improve the model dramatically. However, I intend to come back to the project to build a more robust and accurate model."
      ],
      "metadata": {
        "id": "ZoDi90rueah9"
      }
    }
  ]
}